#define PLUGIN_NAME     RF69
#define RADIOLIB_CLASS  RF69

RADIO_PLUGIN_START

RADIOLIB_CLASS* radio;

bool init() override {
    SETTING_OR_ERROR(pin_cs);
    SETTING_WITH_DEFAULT(frequency, 433.92);
    SETTING_WITH_DEFAULT(bandwidth, 250);
    SETTING_WITH_DEFAULT(bitrate, 9.6);
    radiolibInit();
    radio = new RADIOLIB_CLASS(radioLibModule);
    int threshold_type_int = thresholdSetup(
        RADIOLIB_RF69_OOK_THRESH_FIXED,
        RADIOLIB_RF69_OOK_THRESH_AVERAGE,
        RADIOLIB_RF69_OOK_THRESH_PEAK
    );
    int threshold_level;
    SETTING_WITH_DEFAULT(threshold_level, 6);
    int tx_power;
    SETTING_WITH_DEFAULT(tx_power, 13);
    INFO("%s: Transmit power set to %i dBm, set to %s.\n", QUOTE(PLUGIN_NAME), tx_power, Settings::isSet("tx_high_power") ? "high power module (RF69H/HC/HCW)" : "low power module (RF69C/CW)");
    RADIO_DO(begin(frequency, bitrate, 50.0F, bandwidth, 12, 16));
    RADIO_DO(setOOK(true));
    RADIO_DO(setDataShaping(RADIOLIB_SHAPING_NONE));
    RADIO_DO(setEncoding(RADIOLIB_ENCODING_NRZ));
    RADIO_DO(setOokThresholdType(threshold_type_int));
    RADIO_DO(setOokFixedThreshold(threshold_level));
    RADIO_DO(setOokPeakThresholdDecrement(RADIOLIB_RF69_OOK_PEAK_THRESH_DEC_1_8_CHIP));
    RADIO_DO(setLnaTestBoost(true));
    return true;
}

bool rx() override {
    RADIO_DO(receiveDirect());
    RADIO_DO(disableContinuousModeBitSync());
    return true;
}

bool tx() override {
    int tx_power;
    SETTING_WITH_DEFAULT(tx_power, 13);
    RADIO_DO(setOutputPower(tx_power, Settings::isSet("tx_high_power")));
    RADIO_DO(transmitDirect());
    return true;          
}

bool standby() override {
    RADIO_DO(standby());
    return true;
}

RADIO_PLUGIN_END
